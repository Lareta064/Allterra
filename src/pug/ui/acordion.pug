include ../layouts/_mixins-links.pug
block variables

<!DOCTYPE html>
html(lang="ru")
	head
		meta(charset="UTF-8")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		meta(http-equiv="X-UA-Compatible", content="ie=edge")

		//====убрать синий цвет у ссылок в сафари ========
		meta(name="format-detection" content="telephone=no")
		link(rel="stylesheet", href="../css/main.css")
		title UI-KIT

	body.body-dashboard

		include ui-navigation.pug

		block content
			.container-dashboard
				.accordion-group
					h3.accordion-header.default-open Заголовок 1
					.accordion-body
						p Текст 1
						.accordion-group(data-multiple="true")
							h3.f20.accordion-header Заголовок 1.1
							.accordion-body
								p Текст 1.1
							h3.f20.accordion-header Заголовок 1.2
							.accordion-body
								p Текст 1.2
							h3.f20.accordion-header Заголовок 1.3
							.accordion-body
								p Текст 1.3
					h3.accordion-header.default-open Заголовок 2
					.accordion-body
						p Текст 2
			script( src="https://code.jquery.com/jquery-3.7.1.min.js" )
			script.
					;(function ($, window, document, undefined) {
						"use strict";
						var pluginName = 'simpleAccordion',
						defaults = {
							multiple: false,
							speedOpen: 300,
							speedClose: 150,
							easingOpen: null,
							easingClose: null,
							headClass: 'accordion-header',
							bodyClass: 'accordion-body',
							openClass: 'open',
							defaultOpenClass: 'default-open',
							cbClose: null, //function (e, $this) {},
							cbOpen: null //function (e, $this) {}
						};
						function Accordion(element, options) {
							this.$el = $(element);
							this.options = $.extend({}, defaults, options);
							this._defaults = defaults;
							this._name = pluginName;
							if (typeof this.$el.data('multiple') !== 'undefined') {
								this.options.multiple = this.$el.data('multiple');
								} else {
								this.options.multiple = this._defaults.multiple;
							}
							this.init();
						}
						Accordion.prototype = {
							init: function () {
								var o = this.options,
								$headings = this.$el.children('.' + o.headClass);
								$headings.on('click', {_t:this}, this.headingClick);
								$headings.filter('.' + o.defaultOpenClass).first().click();
							},
							headingClick: function (e) {
								var $this = $(this),
								_t = e.data._t,
								o = _t.options,
								$headings = _t.$el.children('.' + o.headClass),
								$currentOpen = $headings.filter('.' + o.openClass);
								if (!$this.hasClass(o.openClass)) {
									if ($currentOpen.length && o.multiple === false) {
										$currentOpen.removeClass(o.openClass).next('.' + o.bodyClass).slideUp(o.speedClose, o.easingClose, function () {
											if ($.isFunction(o.cbClose)) {
												o.cbClose(e, $currentOpen);
											}
											$this.addClass(o.openClass).next('.' + o.bodyClass).slideDown(o.speedOpen, o.easingOpen, function () {
												if ($.isFunction(o.cbOpen)) {
													o.cbOpen(e, $this);
												}
											});
										});
										} else {
										$this.addClass(o.openClass).next('.' + o.bodyClass).slideDown(o.speedOpen, o.easingOpen, function () {
											$this.removeClass(o.defaultOpenClass);
											if ($.isFunction(o.cbOpen)) {
												o.cbOpen(e, $this);
											}
										});
									}
									} else {
									$this.removeClass(o.openClass).next('.' + o.bodyClass).slideUp(o.speedClose, o.easingClose, function () {
										if ($.isFunction(o.cbClose)) {
											o.cbClose(e, $this);
										}
									});
								}
							}
						};
						$.fn[pluginName] = function (options) {
							return this.each(function () {
								if (!$.data(this, 'plugin_' + pluginName)) {
									$.data(this, 'plugin_' + pluginName,
									new Accordion(this, options));
								}
							});
						};
					}(jQuery, window, document));
					$(function() {
    					$('.accordion-group').simpleAccordion();
					});